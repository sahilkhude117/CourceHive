
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  progress      Progress[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  purchases     Purchase[]
}

model Course {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  description     String
  instructor      String    @default("Harkirat Singh")
  originalPrice   Int       @default(1000)
  price           Int
  thumbnailUrl    String
  telegramLink    String    // Telegram group link
  categoryId      String
  category        Category  @relation(fields: [categoryId], references: [id])
  purchases       Purchase[]
  modules         Module[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([categoryId])
}

model Module {
  id              String     @id @default(cuid())
  title           String
  description     String?
  order           Int        @default(0)
  courseId        String
  course          Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons         Lesson[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([courseId])
  @@unique([order,courseId])
}

model Lesson {
  id              String     @id @default(cuid())
  title           String
  description     String?
  videoUrl        String 
  duration        Int        //duration in minutes
  order           Int        @default(0)
  moduleId        String
  module          Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress        Progress[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([order])
  @@unique([order,moduleId])
}

model Progress {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId        String
  lesson          Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed       Boolean     @default(false)
  completedAt     DateTime?

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  courses     Course[]
}

model Purchase {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  paymentId     String    @unique    // Reference to payment gateway transaction
  amount        Int
  status        PaymentStatus @default(PENDING)
  purchasedAt   DateTime  @default(now())

  // @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([status])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
